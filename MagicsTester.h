#pragma once
#include <cstring>
#include <cstdio>

#include "MagicNumberGenerator.h"
#include "moves.h"

constexpr U64 rookMovesTester[64] = {
        0b0111111110000000100000001000000010000000100000001000000010000000,
        0b1011111101000000010000000100000001000000010000000100000001000000,
        0b1101111100100000001000000010000000100000001000000010000000100000,
        0b1110111100010000000100000001000000010000000100000001000000010000,
        0b1111011100001000000010000000100000001000000010000000100000001000,
        0b1111101100000100000001000000010000000100000001000000010000000100,
        0b1111110100000010000000100000001000000010000000100000001000000010,
        0b1111111000000001000000010000000100000001000000010000000100000001,
        0b1000000001111111100000001000000010000000100000001000000010000000,
        0b0100000010111111010000000100000001000000010000000100000001000000,
        0b0010000011011111001000000010000000100000001000000010000000100000,
        0b0001000011101111000100000001000000010000000100000001000000010000,
        0b0000100011110111000010000000100000001000000010000000100000001000,
        0b0000010011111011000001000000010000000100000001000000010000000100,
        0b0000001011111101000000100000001000000010000000100000001000000010,
        0b0000000111111110000000010000000100000001000000010000000100000001,
        0b1000000010000000011111111000000010000000100000001000000010000000,
        0b0100000001000000101111110100000001000000010000000100000001000000,
        0b0010000000100000110111110010000000100000001000000010000000100000,
        0b0001000000010000111011110001000000010000000100000001000000010000,
        0b0000100000001000111101110000100000001000000010000000100000001000,
        0b0000010000000100111110110000010000000100000001000000010000000100,
        0b0000001000000010111111010000001000000010000000100000001000000010,
        0b0000000100000001111111100000000100000001000000010000000100000001,
        0b1000000010000000100000000111111110000000100000001000000010000000,
        0b0100000001000000010000001011111101000000010000000100000001000000,
        0b0010000000100000001000001101111100100000001000000010000000100000,
        0b0001000000010000000100001110111100010000000100000001000000010000,
        0b0000100000001000000010001111011100001000000010000000100000001000,
        0b0000010000000100000001001111101100000100000001000000010000000100,
        0b0000001000000010000000101111110100000010000000100000001000000010,
        0b0000000100000001000000011111111000000001000000010000000100000001,
        0b1000000010000000100000001000000001111111100000001000000010000000,
        0b0100000001000000010000000100000010111111010000000100000001000000,
        0b0010000000100000001000000010000011011111001000000010000000100000,
        0b0001000000010000000100000001000011101111000100000001000000010000,
        0b0000100000001000000010000000100011110111000010000000100000001000,
        0b0000010000000100000001000000010011111011000001000000010000000100,
        0b0000001000000010000000100000001011111101000000100000001000000010,
        0b0000000100000001000000010000000111111110000000010000000100000001,
        0b1000000010000000100000001000000010000000011111111000000010000000,
        0b0100000001000000010000000100000001000000101111110100000001000000,
        0b0010000000100000001000000010000000100000110111110010000000100000,
        0b0001000000010000000100000001000000010000111011110001000000010000,
        0b0000100000001000000010000000100000001000111101110000100000001000,
        0b0000010000000100000001000000010000000100111110110000010000000100,
        0b0000001000000010000000100000001000000010111111010000001000000010,
        0b0000000100000001000000010000000100000001111111100000000100000001,
        0b1000000010000000100000001000000010000000100000000111111110000000,
        0b0100000001000000010000000100000001000000010000001011111101000000,
        0b0010000000100000001000000010000000100000001000001101111100100000,
        0b0001000000010000000100000001000000010000000100001110111100010000,
        0b0000100000001000000010000000100000001000000010001111011100001000,
        0b0000010000000100000001000000010000000100000001001111101100000100,
        0b0000001000000010000000100000001000000010000000101111110100000010,
        0b0000000100000001000000010000000100000001000000011111111000000001,
        0b1000000010000000100000001000000010000000100000001000000001111111,
        0b0100000001000000010000000100000001000000010000000100000010111111,
        0b0010000000100000001000000010000000100000001000000010000011011111,
        0b0001000000010000000100000001000000010000000100000001000011101111,
        0b0000100000001000000010000000100000001000000010000000100011110111,
        0b0000010000000100000001000000010000000100000001000000010011111011,
        0b0000001000000010000000100000001000000010000000100000001011111101,
        0b0000000100000001000000010000000100000001000000010000000111111110,
};

constexpr U64 bischopMovesTester[64] = {
        0b0000000001000000001000000001000000001000000001000000001000000001,
        0b0000000010100000000100000000100000000100000000100000000100000000,
        0b0000000001010000100010000000010000000010000000010000000000000000,
        0b0000000000101000010001001000001000000001000000000000000000000000,
        0b0000000000010100001000100100000110000000000000000000000000000000,
        0b0000000000001010000100010010000001000000100000000000000000000000,
        0b0000000000000101000010000001000000100000010000001000000000000000,
        0b0000000000000010000001000000100000010000001000000100000010000000,
        0b0100000000000000010000000010000000010000000010000000010000000010,
        0b1010000000000000101000000001000000001000000001000000001000000001,
        0b0101000000000000010100001000100000000100000000100000000100000000,
        0b0010100000000000001010000100010010000010000000010000000000000000,
        0b0001010000000000000101000010001001000001100000000000000000000000,
        0b0000101000000000000010100001000100100000010000001000000000000000,
        0b0000010100000000000001010000100000010000001000000100000010000000,
        0b0000001000000000000000100000010000001000000100000010000001000000,
        0b0010000001000000000000000100000000100000000100000000100000000100,
        0b0001000010100000000000001010000000010000000010000000010000000010,
        0b1000100001010000000000000101000010001000000001000000001000000001,
        0b0100010000101000000000000010100001000100100000100000000100000000,
        0b0010001000010100000000000001010000100010010000011000000000000000,
        0b0001000100001010000000000000101000010001001000000100000010000000,
        0b0000100000000101000000000000010100001000000100000010000001000000,
        0b0000010000000010000000000000001000000100000010000001000000100000,
        0b0001000000100000010000000000000001000000001000000001000000001000,
        0b0000100000010000101000000000000010100000000100000000100000000100,
        0b0000010010001000010100000000000001010000100010000000010000000010,
        0b1000001001000100001010000000000000101000010001001000001000000001,
        0b0100000100100010000101000000000000010100001000100100000110000000,
        0b0010000000010001000010100000000000001010000100010010000001000000,
        0b0001000000001000000001010000000000000101000010000001000000100000,
        0b0000100000000100000000100000000000000010000001000000100000010000,
        0b0000100000010000001000000100000000000000010000000010000000010000,
        0b0000010000001000000100001010000000000000101000000001000000001000,
        0b0000001000000100100010000101000000000000010100001000100000000100,
        0b0000000110000010010001000010100000000000001010000100010010000010,
        0b1000000001000001001000100001010000000000000101000010001001000001,
        0b0100000000100000000100010000101000000000000010100001000100100000,
        0b0010000000010000000010000000010100000000000001010000100000010000,
        0b0001000000001000000001000000001000000000000000100000010000001000,
        0b0000010000001000000100000010000001000000000000000100000000100000,
        0b0000001000000100000010000001000010100000000000001010000000010000,
        0b0000000100000010000001001000100001010000000000000101000010001000,
        0b0000000000000001100000100100010000101000000000000010100001000100,
        0b0000000010000000010000010010001000010100000000000001010000100010,
        0b1000000001000000001000000001000100001010000000000000101000010001,
        0b0100000000100000000100000000100000000101000000000000010100001000,
        0b0010000000010000000010000000010000000010000000000000001000000100,
        0b0000001000000100000010000001000000100000010000000000000001000000,
        0b0000000100000010000001000000100000010000101000000000000010100000,
        0b0000000000000001000000100000010010001000010100000000000001010000,
        0b0000000000000000000000011000001001000100001010000000000000101000,
        0b0000000000000000100000000100000100100010000101000000000000010100,
        0b0000000010000000010000000010000000010001000010100000000000001010,
        0b1000000001000000001000000001000000001000000001010000000000000101,
        0b0100000000100000000100000000100000000100000000100000000000000010,
        0b0000000100000010000001000000100000010000001000000100000000000000,
        0b0000000000000001000000100000010000001000000100001010000000000000,
        0b0000000000000000000000010000001000000100100010000101000000000000,
        0b0000000000000000000000000000000110000010010001000010100000000000,
        0b0000000000000000000000001000000001000001001000100001010000000000,
        0b0000000000000000100000000100000000100000000100010000101000000000,
        0b0000000010000000010000000010000000010000000010000000010100000000,
        0b1000000001000000001000000001000000001000000001000000001000000000,
};

const int bischopRelevantBits[64] = {
        6,5,5,5,5,5,5,6,
        5,5,5,5,5,5,5,5,
        5,5,7,7,7,7,5,5,
        5,5,7,9,9,7,5,5,
        5,5,7,9,9,7,5,5,
        5,5,7,7,7,7,5,5,
        5,5,5,5,5,5,5,5,
        6,5,5,5,5,5,5,6,
};

const int rookRelevantBits[64] = {
        12,11,11,11,11,11,11,12,
        11,10,10,10,10,10,10,11,
        11,10,10,10,10,10,10,11,
        11,10,10,10,10,10,10,11,
        11,10,10,10,10,10,10,11,
        11,10,10,10,10,10,10,11,
        11,10,10,10,10,10,10,11,
        12,11,11,11,11,11,11,12,
};

// rook magic numbers
U64 rook_magic_numbers[64] = {
        0x8a80104000800020ULL,
        0x140002000100040ULL,
        0x2801880a0017001ULL,
        0x100081001000420ULL,
        0x200020010080420ULL,
        0x3001c0002010008ULL,
        0x8480008002000100ULL,
        0x2080088004402900ULL,
        0x800098204000ULL,
        0x2024401000200040ULL,
        0x100802000801000ULL,
        0x120800800801000ULL,
        0x208808088000400ULL,
        0x2802200800400ULL,
        0x2200800100020080ULL,
        0x801000060821100ULL,
        0x80044006422000ULL,
        0x100808020004000ULL,
        0x12108a0010204200ULL,
        0x140848010000802ULL,
        0x481828014002800ULL,
        0x8094004002004100ULL,
        0x4010040010010802ULL,
        0x20008806104ULL,
        0x100400080208000ULL,
        0x2040002120081000ULL,
        0x21200680100081ULL,
        0x20100080080080ULL,
        0x2000a00200410ULL,
        0x20080800400ULL,
        0x80088400100102ULL,
        0x80004600042881ULL,
        0x4040008040800020ULL,
        0x440003000200801ULL,
        0x4200011004500ULL,
        0x188020010100100ULL,
        0x14800401802800ULL,
        0x2080040080800200ULL,
        0x124080204001001ULL,
        0x200046502000484ULL,
        0x480400080088020ULL,
        0x1000422010034000ULL,
        0x30200100110040ULL,
        0x100021010009ULL,
        0x2002080100110004ULL,
        0x202008004008002ULL,
        0x20020004010100ULL,
        0x2048440040820001ULL,
        0x101002200408200ULL,
        0x40802000401080ULL,
        0x4008142004410100ULL,
        0x2060820c0120200ULL,
        0x1001004080100ULL,
        0x20c020080040080ULL,
        0x2935610830022400ULL,
        0x44440041009200ULL,
        0x280001040802101ULL,
        0x2100190040002085ULL,
        0x80c0084100102001ULL,
        0x4024081001000421ULL,
        0x20030a0244872ULL,
        0x12001008414402ULL,
        0x2006104900a0804ULL,
        0x1004081002402ULL
};

// bishop magic numbers
U64 bishop_magic_numbers[64] = {
        0x40040844404084ULL,
        0x2004208a004208ULL,
        0x10190041080202ULL,
        0x108060845042010ULL,
        0x581104180800210ULL,
        0x2112080446200010ULL,
        0x1080820820060210ULL,
        0x3c0808410220200ULL,
        0x4050404440404ULL,
        0x21001420088ULL,
        0x24d0080801082102ULL,
        0x1020a0a020400ULL,
        0x40308200402ULL,
        0x4011002100800ULL,
        0x401484104104005ULL,
        0x801010402020200ULL,
        0x400210c3880100ULL,
        0x404022024108200ULL,
        0x810018200204102ULL,
        0x4002801a02003ULL,
        0x85040820080400ULL,
        0x810102c808880400ULL,
        0xe900410884800ULL,
        0x8002020480840102ULL,
        0x220200865090201ULL,
        0x2010100a02021202ULL,
        0x152048408022401ULL,
        0x20080002081110ULL,
        0x4001001021004000ULL,
        0x800040400a011002ULL,
        0xe4004081011002ULL,
        0x1c004001012080ULL,
        0x8004200962a00220ULL,
        0x8422100208500202ULL,
        0x2000402200300c08ULL,
        0x8646020080080080ULL,
        0x80020a0200100808ULL,
        0x2010004880111000ULL,
        0x623000a080011400ULL,
        0x42008c0340209202ULL,
        0x209188240001000ULL,
        0x400408a884001800ULL,
        0x110400a6080400ULL,
        0x1840060a44020800ULL,
        0x90080104000041ULL,
        0x201011000808101ULL,
        0x1a2208080504f080ULL,
        0x8012020600211212ULL,
        0x500861011240000ULL,
        0x180806108200800ULL,
        0x4000020e01040044ULL,
        0x300000261044000aULL,
        0x802241102020002ULL,
        0x20906061210001ULL,
        0x5a84841004010310ULL,
        0x4010801011c04ULL,
        0xa010109502200ULL,
        0x4a02012000ULL,
        0x500201010098b028ULL,
        0x8040002811040900ULL,
        0x28000010020204ULL,
        0x6000020202d0240ULL,
        0x8918844842082200ULL,
        0x4010011029020020ULL
};


int count_bits(U64 bitboard);
U64 set_occupancy(int index, int bits_in_mask, U64 attacks_mask);

class MagicsTester {
    MagicNumberGenerator magicNumberGenerator;
public:
    void init_magic_numbers();
private:
    U64 find_magic_number(int square, int relevant_bits, bool bischop);
};